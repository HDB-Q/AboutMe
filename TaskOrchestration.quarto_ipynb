{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Task Orchestration\n",
        "filters:\n",
        "  - lightbox\n",
        "lightbox: auto\n",
        "---\n",
        "\n",
        "\n",
        "## Task Orchestration\n",
        "\n",
        "Task orchestration through tools like `Crontab` or `Windows Task Scheduler` is useful for automating routine processes and managing system tasks. \n",
        "\n",
        "These tools enable users to schedule scripts and other workloads to run automatically at specified times (such as automatic program updates). By automating these tasks, users can ensure critical operations are performed consistently without manual intervention, reducing the risk of human error and freeing up valuable time in both personal and professional environments.\n",
        "\n",
        "In this series, we will use crontab to autorun some scraping scripts\n",
        "\n",
        "![Automation Icon](img/Automation_Icon.png){description=\"Automation. _credit:_ [Flaticon Pack](https://www.flaticon.com/free-icon/automation_3417681?term=automation&page=1&position=16&origin=search&related_id=3417681)\"\n",
        "desc-position=\"left\"}\n",
        "\n",
        "## For Linux\n",
        "\n",
        "### 1. Open Terminal\n",
        "\n",
        "Crontab can be accessed via the terminal using `crontab -e` to open the crontab menu. \n",
        "\n",
        "### 2. Edit Crontab\n",
        "\n",
        "If doing this for the first time, there’ll be a prompted to select the menu.  Enter 1 to choose /bin/nano. \n",
        "\n",
        "- Add image here!\n",
        "  \n",
        "Once crontab is set to open with nano, we can pass `crontab – e` again to view the editor. Scroll to the bottom of the comments and you will be able to set a regular interval and the path to your file. \n",
        "\n",
        "### 3. Add a Cron Job \n",
        "\n",
        "The five asterisks represent time and date fields:\n",
        "•\t* (minute) - 0-59\n",
        "•\t* (hour) - 0-23\n",
        "•\t* (day of the month) - 1-31\n",
        "•\t* (month) - 1-12\n",
        "•\t* (day of the week) - 0-7 (0 and 7 both represent Sunday)\n",
        "\n",
        "So, for example\n",
        "\n",
        "```{sh}\n",
        "5 10 * * 3 python3 /home/pi/phidgets_temperature.py\n",
        "```\n",
        "\n",
        "\n",
        "The above means that the program at `/home/pi/phidgets_temperature.py` will be run at 10:05am on every Wednesday. You can check the correct time using the [crontab.guru](\"https://crontab.guru/\") service. You can find the copy the path from the file explorer. \n",
        "\n",
        "- add image here\n",
        "\n",
        "4. Save and Exit\n",
        "If you’re using nano, save your changes by pressing CTRL + X, then Y to confirm, and Enter to save.\n",
        "\n",
        "- add image here\n",
        "5. Verify Cron Jobs\n",
        "To view the current list of cron jobs for the user, use  `crontab -l` from the terminal\n",
        "\n",
        "- add image here\n",
        "\n",
        "## For Windows\n",
        "\n",
        "To run a python file from windows, check that it can be run via the Terminal. To automate it, you will need a batch file to pass the command automatically into a terminal. \n",
        "### 1. Create a Batch File\n",
        "1.\tOpen Notepad and Write Your Batch Script:\n",
        "o\tEnter the commands you want to run in your batch file. For example, let's create a batch file that writes the current date and time to a log file:\n",
        "@echo off\n",
        "C:\\Python39\\python.exe C:\\Scripts\\log_time.py \n",
        "\n",
        "2.\tSave the Batch File:\n",
        "o\tGo to File -> Save As.\n",
        "o\tIn the Save as type dropdown, select All Files.\n",
        "o\tName the file with a .bat extension, for example, AutomatedTask.bat.\n",
        "o\tSave it to a location of your choice, such as C:\\Users\\hbdil\\Desktop\\Notebook_Projects\\AutomatedTask.bat.\n",
        "2. Schedule the Batch File with Task Scheduler\n",
        "1.\tOpen Task Scheduler:\n",
        "o\tPress Win + S, type Task Scheduler, and select the Task Scheduler app.\n",
        "2.\tCreate a New Task:\n",
        "o\tIn the right-hand pane, click on Create Basic Task.\n",
        "3.\tName and Describe Your Task:\n",
        "o\tGive your task a name, like \"Automatic Python Task\", and add a description if desired.\n",
        "o\tClick Next.\n",
        "4.\tSet the Trigger:\n",
        "o\tChoose when you want the task to start. For example, select Daily if you want it to run every day.\n",
        "o\tClick Next, and then set the start date and time. Click Next again.\n",
        "5.\tChoose the Action:\n",
        "o\tSelect Start a program and click Next.\n",
        "6.\tSpecify the Batch File:\n",
        "o\tClick Browse and navigate to the location of your batch file (C:\\Users\\hbdil\\Desktop\\Notebook_Projects\\AutomatedTask.bat.).\n",
        "o\tSelect the batch file and click Open.\n",
        "o\tClick Next.\n",
        "7.\tFinish the Task:\n",
        "o\tReview your settings and click Finish to create the task.\n",
        "3. Verify and Test\n",
        "1.\tCheck Task Scheduler:\n",
        "o\tIn the Task Scheduler, locate your newly created task under the Task Scheduler Library.\n",
        "2.\tRun the Task Manually (Optional):\n",
        "o\tRight-click the task and select Run to test if it executes as expected.\n",
        "3.\tCheck the Log File:\n",
        "o\tAfter the scheduled time passes, check your log file (C:\\path\\to\\your\\timestamp.log) to ensure that the batch script ran successfully and appended the date and time.\n",
        "Additional Tips\n",
        "•\tRunning as Administrator: If your script requires administrative privileges, you may need to configure the task to run with the highest privileges. This can be done in the task’s properties under the General tab by checking Run with highest privileges.\n",
        "By following these steps, you can automate tasks on Windows using batch files and Task Scheduler.\n"
      ],
      "id": "8fea2b3c"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\hbdil\\anaconda3\\envs\\geo_env\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}